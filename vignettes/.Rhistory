stats <- setnames(stats,c("module","variable","value"))
stats <- dcast(stats,module~variable)
return(stats)
}
#' Combine into one table
toplot <- lapply(gsea.time,summarizeGSEA)
names(toplot)<-colnames(coef(fit,"D"))[colnames(coef(fit,"D"))%like%"Time"]
#names(toplot)[1:3]<-paste0("StimLPS:",names(toplot)[1:3])
toplot<-data.table(ldply(toplot))
setnames(toplot,".id","coefficient")
#Map go ids to descriptions
ids <- as.character(unique(toplot[,module]))
GOID_terms<-select(GO.db,keys=ids,columns="TERM",keytype="GOID")
#Merge with gsea results based on GOID
GOID_terms<-data.table(GOID_terms)
setkey(GOID_terms,GOID)
setnames(toplot,"module","GOID")
setkey(toplot,GOID)
toplot<-merge(toplot,GOID_terms)
toplot[,TERM:=ifelse(is.na(TERM),GOID,TERM)]
toplot[,Stim:=factor(gsub(":.+","",coefficient))]
toplot[,adjp:=p.adjust(P,"fdr"),Stim]
toplot<-na.omit(toplot)
toplot[,include:=any(adjp<1e-10),TERM]
toplot<-toplot[!TERM%in%c("biological regulation","regulation of biological process","positive regulation of response to stimulus","regulation of response to stimulus")]
toplot<-toplot[!TERM%like%"TBA"]
o<-order(toplot[include==TRUE,sum((Z))/sqrt(length(Z)),TERM]$V1)
levs<-toplot[include==TRUE,TERM,TERM]$TERM
toplot[,coefficient:=factor(toplot$coefficient)]
#exclude very generic terms
#levels(toplot$coefficient)[levels(toplot$coefficient)%like%"^Time"]<-paste0("LPS:",levels(toplot$coefficient)[levels(toplot$coefficient)%like%"^Time"])
ggplot((toplot[include==TRUE]))+aes(x=coefficient,y=TERM,fill=pmin(-log10(adjp),40)*sign(Z))+geom_raster()+theme(axis.text.x=element_text(angle=90,hjust=1))+scale_fill_gradient2("signed -log10 q-value",high="red",low="blue",space="Lab")+scale_y_discrete("Module",limits=levs[o])+scale_x_discrete("Condition")
toplot<-toplot[!TERM%in%c("biological regulation","regulation of biological process","positive regulation of biological process","positive regulation of response to stimulus","regulation of response to stimulus")]
toplot<-toplot[!TERM%like%"TBA"]
o<-order(toplot[include==TRUE,sum((Z))/sqrt(length(Z)),TERM]$V1)
levs<-toplot[include==TRUE,TERM,TERM]$TERM
toplot[,coefficient:=factor(toplot$coefficient)]
#exclude very generic terms
#levels(toplot$coefficient)[levels(toplot$coefficient)%like%"^Time"]<-paste0("LPS:",levels(toplot$coefficient)[levels(toplot$coefficient)%like%"^Time"])
ggplot((toplot[include==TRUE]))+aes(x=coefficient,y=TERM,fill=pmin(-log10(adjp),40)*sign(Z))+geom_raster()+theme(axis.text.x=element_text(angle=90,hjust=1))+scale_fill_gradient2("signed -log10 q-value",high="red",low="blue",space="Lab")+scale_y_discrete("Module",limits=levs[o])+scale_x_discrete("Condition")
pdf(file="/Users/gfinak/Dropbox/GoTeam/Projects/zlm_paper/output/Figure5.pdf",width=15,height=8)
ggplot((toplot[include==TRUE]))+aes(x=coefficient,y=GOID,fill=pmin(-log10(adjp),40)*sign(Z))+geom_raster()+theme(axis.text.x=element_text(angle=90,hjust=1))+scale_fill_gradient2("signed -log10 q-value",high="red",low="blue",space="Lab")+scale_y_discrete("Module",limits=levs[o][!levs[o]%like%"antigen processing"])+scale_x_discrete("Condition")
dev.off()
ggplot((toplot[include==TRUE]))+aes(x=coefficient,y=TERM,fill=pmin(-log10(adjp),25)*sign(Z))+geom_raster()+theme(axis.text.x=element_text(angle=90,hjust=1))+scale_fill_gradient2("signed -log10 q-value",high="red",low="blue",space="Lab")+scale_y_discrete("Module",limits=levs[o])+scale_x_discrete("Condition")
ggplot((toplot[include==TRUE]))+aes(x=coefficient,y=TERM,fill=pmin(-log10(adjp),40)*sign(Z))+geom_raster()+theme(axis.text.x=element_text(angle=90,hjust=1))+scale_fill_gradient2("signed -log10 q-value",high="red",low="blue",space="Lab")+scale_y_discrete("Module",limits=levs[o])+scale_x_discrete("Condition")
writeLines(text = "GSEA using GO BP annotation and modules identified by Shalek et. al., enriched at any timepoint across stimulations. Plotted are sign(Z) -log10 P-values, truncated at -log10(P)=40. Rows are clustered.The core and sustained antiviral signatures increase over time across all stimulations, but less so in PAM than PIC or LPS. The peaked inflammatory signature is strongest in PAM. ",con=file("/Users/gfinak/Dropbox/GoTeam/Projects/zlm_paper/output/Fig5Desc.txt"))
residuals<-ldply(fit@hookOut)
nms <- residuals[,1]
rownames(residuals) <- nms
residuals <- residuals[,-1L]
colnames(residuals)<-rownames(filtered_nobaseline)
levs[o]
foo <- llply(levs[o][c(1:3,41:43)],function(x)data.frame(residual=colMeans(na.omit(residuals[featureData(filtered_nobaseline)@data[sets[[x]],"primerid"],])),cData(filtered_nobaseline)))
foo <- llply(levs[o][c(1:3,41:43)],function(x)data.frame(residual=colMeans(na.omit(residuals[featureData(filtered_nobaseline)@data[sets[[x]],"primerid"],])),cData(filtered_nobaseline)))
names(foo) <- levs[o][c(1:3,41:43)]
foo <- ldply(foo)
ggplot(foo)+aes(y=residual,x=Time,fill=Stim)+facet_grid(.id~Stim,scales="free_y")+geom_violin()+geom_jitter()+theme_bw()+scale_fill_discrete(guide=FALSE)+theme(strip.text.y=element_text(size=6))+geom_hline(aes(y=0),lty=2)
ggsave(file="/Users/gfinak/Dropbox/GoTeam/Projects/zlm_paper/output/Figure5_residuals.pdf")
writeLines(text = "Module residuals across genes for signficant modules from the GSEA analysis. Residuals are averaged across genes in a module, and per cell. The average of the standardized deviance residuals is used. The top 3 over and uder represented modules are shown.",con=file("/Users/gfinak/Dropbox/GoTeam/Projects/zlm_paper/output/Fig5_Residuals_Desc.txt"))
fit.scores<-zlm.SingleCellAssay(~cngeneson+Stim/Time,sca=filtered_nobaseline,method="ridge",ebayes=TRUE,hook=score_2_hook,lambda=0.1)
scores<-do.call(rbind,fit.scores@hookOut)
nms <- names(fit.scores@hookOut)
rownames(scores) <- nms
#scores <- scores[,-1L]
foo <- llply(levs[o][c(1:3,41:43)],function(x)data.frame(score=colMeans(na.omit(scores[featureData(filtered_nobaseline)@data[sets[[x]],"primerid"],])),cData(filtered_nobaseline)))
names(foo) <- levs[o][c(1:3,41:43)]
foo <- ldply(foo)
ggplot(foo)+aes(y=score,x=Time,fill=Stim)+facet_grid(.id~Stim,scales="free_y")+geom_violin()+geom_jitter()+theme_bw()+scale_fill_discrete(guide=FALSE)+theme(strip.text.y=element_text(size=6))+geom_hline(aes(y=0),lty=2)
levs[o]
foo <- llply(levs[o][c(1,3,5,41:43)],function(x)data.frame(score=colMeans(na.omit(scores[featureData(filtered_nobaseline)@data[sets[[x]],"primerid"],])),cData(filtered_nobaseline)))
names(foo) <- levs[o][c(1,3,5,41:43)]
foo <- ldply(foo)
ggplot(foo)+aes(y=score,x=Time,fill=Stim)+facet_grid(.id~Stim,scales="free_y")+geom_violin()+geom_jitter()+theme_bw()+scale_fill_discrete(guide=FALSE)+theme(strip.text.y=element_text(size=6))+geom_hline(aes(y=0),lty=2)
ggsave(file="/Users/gfinak/Dropbox/GoTeam/Projects/zlm_paper/output/Figure5_scores.pdf")
residuals<-ldply(fit@hookOut)
nms <- residuals[,1]
rownames(residuals) <- nms
residuals <- residuals[,-1L]
colnames(residuals)<-rownames(filtered_nobaseline)
foo <- llply(levs[o][c(1,3,5,41:43)],function(x)data.frame(residual=colMeans(na.omit(residuals[featureData(filtered_nobaseline)@data[sets[[x]],"primerid"],])),cData(filtered_nobaseline)))
names(foo) <- levs[o][c(1,3,5,41:43)]
foo <- ldply(foo)
ggplot(foo)+aes(y=residual,x=Time,fill=Stim)+facet_grid(.id~Stim,scales="free_y")+geom_violin()+geom_jitter()+theme_bw()+scale_fill_discrete(guide=FALSE)+theme(strip.text.y=element_text(size=6))+geom_hline(aes(y=0),lty=2)
ggsave(file="/Users/gfinak/Dropbox/GoTeam/Projects/zlm_paper/output/Figure5_residuals.pdf")
str(residuals)
cor(residuals)
pheatmap(cor(residuals))
COMPASS::pheatmap(cor(residuals))
COMPASS::pheatmap(cor(residuals),clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE)
cData(fit)
filtered_nobaseline
COMPASS::pheatmap(cor(residuals),clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[,"Stim"])
COMPASS::pheatmap(cor(residuals),clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[,c("Stim","Time"),drop=FALSE])
C<-cor(residuals)
dim(C)
colnames(C)
range(as.dist(C))
C>0.2
which(C>0.2)
which(C>0.2,T)
which(C>0.2,T)[,1]
C[wh,wh]
wh<-which(C>0.2,T)[,1]
C[wh,wh]
COMPASS::pheatmap(C[wh,wh],clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[wh,c("Stim","Time"),drop=FALSE])
wh<-which(C>0.5,T)[,1]
COMPASS::pheatmap(C[wh,wh],clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[wh,c("Stim","Time"),drop=FALSE])
wh
length(wh)
wh<-which(C>0.,T)[,1]
wh
length(wh)
wh<-which(C>0.5,T)[,1]
wh
length(wh)
wh<-which(C>0,T)[,1]
length(wh)
unique(which(C>0.5,T)[,1])
length(unique(which(C>0.5,T)[,1]))
length(unique(which(C>0,T)[,1]))
length(unique(which(C>0.8,T)[,1]))
apply(C,1,max)
apply(C,1,function(x)max(abs(setdiff(x,1))))
hist(apply(C,1,function(x)max(abs(setdiff(x,1)))))
apply(C,1,function(x)max(abs(setdiff(x,1))))
apply(C,1,function(x)max(abs(setdiff(x,1))))>0.5
apply(C,1,function(x)max(abs(setdiff(x,1))))>0.4
apply(C,1,function(x)max(abs(setdiff(x,1))))>0.4
wh<-which(apply(C,1,function(x)max(abs(setdiff(x,1))))>0.4)
COMPASS::pheatmap(C[wh,wh],clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[wh,c("Stim","Time"),drop=FALSE])
wh<-which(apply(C,1,function(x)max(abs(setdiff(x,1))))>0.2)
COMPASS::pheatmap(C[wh,wh],clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[wh,c("Stim","Time"),drop=FALSE])
wh<-which(apply(C,1,function(x)max(abs(setdiff(x,1))))>0.1)
COMPASS::pheatmap(C[wh,wh],clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[wh,c("Stim","Time"),drop=FALSE])
wh<-which(apply(C,1,function(x)max(abs(setdiff(x,1))))>0.15)
COMPASS::pheatmap(C[wh,wh],clustering_method = "ward",show_rownames=FALSE,show_colnames=FALSE,row_annotation = cData(filtered_nobaseline)[wh,c("Stim","Time"),drop=FALSE])
CC<-cor(t(residuals))
hist(apply(CC,1,function(x)max(abs(setdiff(x,1)))))
wh<-which(apply(CC,1,function(x)max(abs(setdiff(x,1))))>0.5)
length(wh)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=FALSE)
wh<-which(apply(CC,1,function(x)max(abs(setdiff(x,1))))>0.7)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=FALSE)
wh<-which(apply(CC,1,function(x)max(abs(setdiff(x,1))))>0.65)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=FALSE)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=TRUE)
rng<-apply(CC,1,function(x)max(abs(setdiff(x,1))))
wh<-which(rng<0.65&rng>0.6)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=TRUE)
wh<-which(rng<0.65&rng>0.55)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=TRUE)
wh<-which(rng<0.6&rng>0.55)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=TRUE)
wh<-which(rng<0.55&rng>0.5)
COMPASS::pheatmap(CC[wh,wh],clustering_method = "ward",show_rownames=TRUE,show_colnames=TRUE)
library(openCyto)
rnorm(10000*2,mean=c(2,4)
)
hist(rnorm(10000*2,mean=c(2,4)))
hist(rnorm(10000*2,mean=c(2,10)))
rnorm(10000*4,mean=c(2,10))
matrix(rnorm(10000*4,mean=c(2,10)),ncol=2)
matrix(rnorm(10000*4,mean=c(2,10)),ncol=2,byrow=TRUE)
hist(matrix(rnorm(10000*4,mean=c(2,10)),ncol=2,byrow=TRUE)[,1])
M<-matrix(rnorm(10000*4,mean=c(2,10)),ncol=2,byrow=TRUE)
head(M)
nrow(M)
B<-M[10001:20000,]
A<-M[1:10000,]
B<-M[10001:20000,]
colnames(A,c("A","B"))
colnames(A)<-c("A","B")
colnames(B)<-c("A","B")
flowFrame(A)
B<-flowFrame(B)
flowSet(list(A,B))
flowSet(A,B
)
flowSet(A,B)
A
A<-flowFrame(A)
B<-flowFrame(B)
library(openCyto)
M<-matrix(rnorm(10000*4,mean=c(2,10)),ncol=2,byrow=TRUE)
A<-M[1:10000,]
B<-M[10001:20000,]
colnames(A)<-c("A","B")
colnames(B)<-c("A","B")
A<-flowFrame(A)
B<-flowFrame(B)
flowSet(A,B)
fs<-flowSet(A,B)
pData(fs)
pd<-pData(fs)
pd
pd$group<-"g1"
pd
pd$template<-c("yes","no")
pData(fs)<-pd
GatingSet(pd)
library(flowWorkspace)
GatingSet
?GatingSet
GatingSet(fs)
GatingSet(fs,y="gs")
gs<-GatingSet(fs,y="gs")
pData(gs)
M<-matrix(rnorm(10000*4,mean=c(2,10)),ncol=2,byrow=FALSE)
A<-M[1:10000,]
B<-M[10001:20000,]
plot(A)
plot(B)
M<-matrix(rnorm(10000*4,mean=c(2,10,10,2)),ncol=2,byrow=FALSE)
A<-M[1:10000,]
plot(A)
plot(M)
sample(1:nrow(M))
sample(1:nrow(M),M/2)
sample(1:nrow(M),nrow(M)/2)
M[sample(1:nrow(M),nrow(M)/2),]
M[s,1]<-M[s,1]+8
s<-sample(1:nrow(M),nrow(M)/2)
M[s,1]<-M[s,1]+8
plot(M)
M<-matrix(rnorm(10000*4,mean=c(2)),ncol=2,byrow=FALSE)
s<-sample(1:nrow(M),nrow(M)/2)
M[s,1]<-M[s,1]+8
plot(M)
M[s,2,]<-M[s,2]+8
plot(M)
s<-sample(1:nrow(M),nrow(M)/2)
M[s,2,]<-M[s,2]+8
plot(M)
s<
1
s
M[s,2]<-M[s,2]+8
plot(M)
A<-M[1:10000,]
B<-M[10001:20000,]
colnames(A)<-c("A","B")
colnames(B)<-c("A","B")
A<-flowFrame(A)
B<-flowFrame(B)
fs<-flowSet(A,B)
pd<-pData(fs)
pd$group<-"g1"
pd$template<-c("yes","no")
pData(fs)<-pd
gs<-GatingSet(fs,y="gs")
pData(gs)
gt<-gatingTemplate("template.csv")
gating(gt,fs)
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt
slotNames(gt)
gt@name
gt@nodes
plot(gt)
gt@nodeData
gt@edgeData
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt@nodes
gt@edgeData
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gating(gt,gs)
getChannelMarker
description(fs)
description(A)
description(A)
keyword(A)
desc(A)
?description
?description
parameters(A)
pData(parameters(A))
gt<-gatingTemplate("template.csv")
gating(gt,gs)
getChannelMarker()
?getChannelMarker
getChannelMarker(A,"A")
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gating(gs)
gating(gs,gt)
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gating(gt,gs)
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gating
showMethods(gating)
showMethods(gatingTemplate)
gatingTemplate
getMethods(gatingTemplate)
getMethods("gatingTemplate")
openCyto:::.preprocess_csv("template.csv")
openCyto:::.preprocess_csv
debug(openCyto:::.preprocess_csv)
openCyto:::.preprocess_csv("template.csv")
fread("template.csv")
library(data.table)
fread("template.csv")
tp<-fread("template.csv")
openCyto:::.preprocess_csv(tp)
openCyto:::.preprocess_csv(tp)
dt
dt[,list(alias,pop,parent,dims,gating_method,gating_args)]
dt
dtdt[,popV]
dtdt[,pop]
dt[,pop]
colnames(dt)
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
dt
showMethods("gating")
showMethods("gatingTemplate")
getMethods("gatingTemplate")
fred("template.csv")
fread("template.csv")
fread("template.csv",header=TRUE)
fread("template.csv")
gt<-gatingTemplate("template.csv")
debug
undebug(openCyoto:::.preprocess_csv)
undebug(openCyto:::.preprocess_csv)
gt<-gatingTemplate("template.csv")
fread("template.csv")
gt<-gatingTemplate("template.csv")
fread("template.csv")
gt<-gatingTemplate("template.csv")
fread("template.csv")
gt<-gatingTemplate("template.csv")
fread("template.csv")
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
showMethods(gatingTemplate)
showMethods("gatingTemplate")
getMethods("gatingTemplate")
dt<-fread("template.csv")
dt
openCyto:::.preprocess_csv(dt)
debug(openCyto:::.preprocess_csv)
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
dt[0,]
dt
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gs<-GatingSet(fs,y="gs")
gt<-gatingTemplate("template.csv")
dt<-fread("template.csv")
dt
dt[0]
dt[0,]
dt[1,]
dt[2,]
dt[0,]
gt<-gatingTemplate("template.csv")
dt[, list(alias, pop, parent, dims, gating_method,
gating_args, collapseDataForGating, groupBy, preprocessing_method,
preprocessing_args)]
dt[, list(alias, pop, parent, dims, gating_method,
gating_args, collapseDataForGating, groupBy, preprocessing_method,
preprocessing_args)]
dt[, list(alias, pop, parent, dims, gating_method,gating_args, collapseDataForGating, groupBy, preprocessing_method,preprocessing_args)]
dt[, list(alias, pop, parent, dims, gating_method,gating_args, collapseDataForGating, groupBy, preprocessing_method,preprocessing_args)]
dt
dt[, list(alias)]
gt<-gatingTemplate("template.csv")
dt[, list(alias, pop, parent, dims, gating_method,gating_args, collapseDataForGating, groupBy, preprocessing_method,preprocessing_args)]c
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
undebug(openCyot:::.preprocess_csv)
undebug(openCyto:::.preprocess_csv)
gt<-gatingTemplate("template.csv")
gt<-gatingTemplate("template.csv")
gating(gt,gs)
registerPlugins()
?registerPlugins()
source('~/Untitled.R')
install.packages("rticles")
devtools::install_github("rstudio/rticles")
rmarkdown::draft("MyJSSArticle.Rmd", template = "jss_article", package = "rticles")
getwd()
list.files()
rmarkdown::draft("MyRJournalArticle", template = "rjournal_article", package = "rticles")
rmarkdown::draft("MyPLOSArticle",template="plos_article",package="rticles")
devtools::install_github("gforge/Grmd")
update.packages()
install_github("github.fhcrc.org","VIDD-VISC/scharpTemplates")
devtools::install_github("github.fhcrc.org","VIDD-VISC/scharpTemplates")
devtools::install_github("github.fhcrc.org/VIDD-VISC/scharpTemplates")
devtools::install_github("http://github.fhcrc.org/VIDD-VISC/scharpTemplates")
devtools::install_github("git://github.fhcrc.org/VIDD-VISC/scharpTemplates")
devtools::install_github("git:github.fhcrc.org/VIDD-VISC/scharpTemplates")
devtools::install_github("git@github.fhcrc.org/VIDD-VISC/scharpTemplates")
devtools::install_github("git@github.fhcrc.org:VIDD-VISC/scharpTemplates")
devtools::install_git("http://github.fhcrc.org/VIDD-VISC/scharpTemplates")
devtools::install_git("~/Documents/Projects/scharpTemplates")
devtools::install_local("~/Documents/Projects/scharpTemplates")
install.packages("repmis")
repmis::LoadandCite(pkgs = PackagesUsesd,file = 'Packages2.bib')
PackagesUsesd <- c('knitr','Hmisc','xtable','data.table','tidyr','ggplot2','reshape2','repmis','AUP567')
repmis::LoadandCite(pkgs = PackagesUsesd,file = 'Packages2.bib')
getwD()
getwd()
setwd("~/Dropbox/GoTeam/Projects/BioC2015_OpenCyto/BioC2015OpenCyto/vignettes/")
list.files()
library(knitr)
opts_chunk$set(error=FALSE, message = FALSE, eval = TRUE, warning = FALSE)
library(BioC2015OpenCyto)
loadedNamespaces()
add_pop
data(tbdata)
openCyto
library(openCyto)
add_pop
library(openCyto)
tbdata
Rm("S",tbdata)
tbdata_subset = subset(tbdata,`PATIENT ID`%in%unique(pData(tbdata)$`PATIENT ID`)[1:2])
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
objects()
alias
gtPopulation
object
alias(object)
object
alias
methods(alias)
getMethods("alias")
showMethods("alias")
selectMethod("alias")
selectMethod("alias","gtPopulation")
selectMethod("alias","gtPopulation")(object)
selectMethod("alias","gtPopulation")(target = object)
selectMethod("alias","gtPopulation")
add_pop
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
object
alias(object)
methods(alias)
getMethod("alias")
alias
getMethod("alias")
showMethods("alias")
getMethod("alias",c("gtPopulation"))
getMethod("alias",c("ANY"))
selectMethod("alias",c("gtPopulation"))
selectMethod("alias",c("gtPopulation"))(object)
selectMethod("alias",c("gtPopulation"))
alias
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
library(knitr)
opts_chunk$set(error=FALSE, message = FALSE, eval = TRUE, warning = FALSE)
library(BioC2015OpenCyto)
library(openCyto)
data(tbdata)
#Delete existing gates
Rm("S",tbdata)
tbdata_subset = subset(tbdata,`PATIENT ID`%in%unique(pData(tbdata)$`PATIENT ID`)[1:2])
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
objects
object
objects()
object
alias
load_all("~/Documents/Projects/openCyto/")
add_pop(tbdata_subset, alias = "Singlets", pop = "Singlets", parent = "root", dims = "FSC-A,FSC-H",gating_method = "singletGate",gating_args = "subsample_pct = 0.1")
objects()
gt
getNodes(gt)
getNodes(gt)[[1]]
alias(getNodes(gt)[[1]])
alias(getNodes(gt)[[2]])
getwd()
